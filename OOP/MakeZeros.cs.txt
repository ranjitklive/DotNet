using System;
using System.Collections.Generic;
using System.Diagnostics;

public class makeZeros
{
    public static void make_zeroes(int[][] matrix)
    {
        if (matrix.Length == 0)
        {
            return;
        }

        HashSet<int> zero_rows = new HashSet<int>();
        HashSet<int> zero_cols = new HashSet<int>();

        int rows = matrix.Length;
        int cols = matrix[0].Length;

        for (int i = 0; i < rows; ++i)
        {
            for (int j = 0; j < cols; ++j)
            {
                if (matrix[i][j] == 0)
                {
                    if (!zero_rows.Contains(i))
                    {
                        zero_rows.Add(i);
                    }

                    if (!zero_cols.Contains(j))
                    {
                        zero_cols.Add(j);
                    }
                }
            }
        }

        foreach (int r in zero_rows)
        {
            for (int c = 0; c < cols; ++c)
            {
                matrix[r][c] = 0;
            }
        }

        foreach (int c in zero_cols)
        {
            for (int r = 0; r < rows; ++r)
            {
                matrix[r][c] = 0;
            }
        }
    }
    // public static int[][] create_random_matrix(int rows, int cols)
    // {
    //     //JAVA TO C# CONVERTER NOTE: The following call to the 'RectangularArrays' helper class reproduces the rectangular array initialization that is automatic in Java:
    //     //ORIGINAL LINE: int[][] v = new int[rows][cols];
    //     int[][] v = RectangularArrays.RectangularIntArray(rows, cols);

    //     for (int i = 0; i < rows; ++i)
    //     {
    //         for (int j = 0; j < cols; ++j)
    //         {
    //             int t = (new Random()).Next() % 100;
    //             v[i][j] = t + 1;
    //             if (Math.Abs(t) % 100 <= 5)
    //             {
    //                 v[i][j] = 0;
    //             }
    //         }
    //     }
    //     return v;
    // }

    public static void print_matrix(int[][] m)
    {
        Console.WriteLine();
        for (int i = 0; i < m.Length; i++)
        {
            for (int j = 0; j < m[i].Length; j++)
            {
                Console.Write(m[i][j]);
                Console.Write("\t");
            }
            Console.WriteLine();
        }
    }
    // public static bool is_row_or_col_zero(int[][] matrix, int r, int c)
    // {
    //     int rows = matrix.Length;
    //     int cols = 0;
    //     if (rows > 0)
    //     {
    //         cols = matrix[0].Length;
    //     }

    //     for (int i = 0; i < cols; ++i)
    //     {
    //         if (matrix[r][i] == 0)
    //         {
    //             return true;
    //         }
    //     }

    //     for (int i = 0; i < rows; ++i)
    //     {
    //         if (matrix[i][c] == 0)
    //         {
    //             return true;
    //         }
    //     }

    //     return false;
    // }

    // public static void verify(int[][] matrix)
    // {
    //     int[][] mat_copy = new int[matrix.Length][];
    //     for (int i = 0; i < matrix.Length; ++i)
    //     {
    //         mat_copy[i] = (int[])matrix[i].Clone();
    //     }

    //     make_zeroes(matrix);

    //     int rows = matrix.Length;
    //     int cols = 0;
    //     if (rows > 0)
    //     {
    //         cols = matrix[0].Length;
    //     }

    //     for (int i = 0; i < rows; ++i)
    //     {
    //         for (int j = 0; j < cols; ++j)
    //         {
    //             if (is_row_or_col_zero(mat_copy, i, j))
    //             {
    //                 Debug.Assert((matrix[i][j] == 0));
    //             }
    //         }
    //     }
    // }


    public static void Main(string[] args)
    {
        int[][] matrix = new int[][]
        {
        new int[] {1, 5, 45, 0, 81},
        new int[] {6, 7, 2, 82, 8},
        new int[] {20, 22, 49, 5, 5},
        new int[] {0, 23, 50, 4, 92}
        };
        print_matrix(matrix);
        //verify(matrix);
		make_zeroes(matrix);
        print_matrix(matrix);

        // matrix = create_random_matrix(5, 5);
        // print_matrix(matrix);
        // verify(matrix);
        // print_matrix(matrix);

        // for (int i = 0; i < 25; i++)
        // {
        //     for (int j = 0; j < 25; j++)
        //     {
        //         matrix = create_random_matrix(i, j);
        //         verify(matrix);
        //     }
        // }
    }
}

//Helper class added by Java to C# Converter:

//----------------------------------------------------------------------------------------
//	Copyright Â© 2007 - 2022 Tangible Software Solutions, Inc.
//	This class can be used by anyone provided that the copyright notice remains intact.
//
//	This class includes methods to convert Java rectangular arrays (jagged arrays
//	with inner arrays of the same length).
//----------------------------------------------------------------------------------------
public static class RectangularArrays
{
    public static int[][] RectangularIntArray(int size1, int size2)
    {
        int[][] newArray = new int[size1][];
        for (int array1 = 0; array1 < size1; array1++)
        {
            newArray[array1] = new int[size2];
        }

        return newArray;
    }
}
