using System;
using System.Collections.Generic;

public static class Globals
{
    /*
	 For any bulb to shine at position k (not array index, but the actual position in the line), all the bulbs 1 through k
	 must be turned on at a given instance. Now, if A[i] = p such that it makes all the bulbs 1 through k to shine, then p
	 must be in the range [1, k-1], inclusive and no other position in that range should be missing.
	
	 This means that the sum of the positions of the turned on bulbs must be 1+2+3+...+k.
	 This sum also has to be equal to 1+2+3+ ... +i (1 based index) because no other bulb after position k must not be
	 turned on according to given condition. Time O(N), Space O(1).
	 */

    public static int solution(in List<int> v)
    {
        int v_size = v.Count;
        int ans = 0;
        int sum = 0;
        int target = 0;

        for (int i = 1; i <= v_size; i++)
        {
            sum += v[i - 1];
            target += i; //Sum from 1 to i
            if (sum == target)
            {
                ans++;
            }
        }
        return ans;
    }

    internal static void Main()
    {
        List<int> arr1 = new List<int>() { 2, 1, 3, 5, 4 };
        List<int> arr2 = new List<int>() { 2, 3, 4, 1, 5 };
        List<int> arr3 = new List<int>() { 5, 4, 3, 2, 1 };
        List<int> arr4 = new List<int>() { 1, 2, 3, 4, 5, 6 };

        Console.Write(solution(arr1));
        Console.Write(" Expected 3");
        Console.Write("\n");
        Console.Write(solution(arr2));
        Console.Write(" Expected 2");
        Console.Write("\n");
        Console.Write(solution(arr3));
        Console.Write(" Expected 1");
        Console.Write("\n");
        Console.Write(solution(arr4));
        Console.Write(" Expected 6");
        Console.Write("\n");

    }
}
