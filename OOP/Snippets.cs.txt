
//C# var keyword
var name = "Peter";
var age = 23;

Console.WriteLine($"{name} is {age} years old");

name = "Jozef";
age = 32;

Console.WriteLine($"{name} is {age} years old");

Console.WriteLine(name.GetType());
Console.WriteLine(age.GetType());
Console.WriteLine();

//C# List
var words = new List<string> { "stone", "rock", "falcon", "sky" };

Console.WriteLine(words[2]);
foreach (var word in words)
{
    Console.WriteLine(word);
}
Console.WriteLine();

//C# Discards
var vals = (1, 2, 3, 4, 5, 6);

(int x, int y, int z, _, _, _) = vals;

Console.WriteLine(x);
Console.WriteLine(y);
Console.WriteLine(z);
Console.WriteLine();

//C# Range
foreach (var el in Enumerable.Range(1, 10))
{
    Console.WriteLine(el);
}
Console.WriteLine();

//C# String interpolation
string name1 = "Peter";
int age1 = 34;

string msg = $"{name1} is {age1} years old";

Console.WriteLine(msg);
Console.WriteLine();


//C# Tuples
var words1 = ("sky", "blue", "rock", "fountain");

Console.WriteLine(words1);

Console.WriteLine(words1.Item1);
Console.WriteLine(words1.Item2);

var words2 = (w1: "forest", w2: "deep", w3: "sea");

Console.WriteLine(words2.w1);
Console.WriteLine(words2.w2);
Console.WriteLine(words2.w3);
Console.WriteLine();

//C# Records
// record Car(string Name, int Price);

// var cars = new List<Car>
// {
//     new Car("Audi", 52642),
//     new Car("Mercedes", 57127),
//     new Car("Skoda", 9000),
//     new Car("Volvo", 29000),
//     new Car("Bentley", 350000),
//     new Car("Citroen", 21000),
//     new Car("Hummer", 41400),
//     new Car("Volkswagen", 21600)
// };

// var res = from car in cars
//           where car.Price > 30000 && car.Price < 100000
//           select new { car.Name, car.Price };

// foreach (var car in res)
// {
//     Console.WriteLine($"{car.Name} {car.Price}");
// }


//C# Strings and Char
string word1 = "ZetCode";

char c = word1[0];

Console.WriteLine(c);
Console.WriteLine();

//c# Arrays
int[] numbers = new int[5];

numbers[0] = 3;
numbers[1] = 2;
numbers[2] = 1;
numbers[3] = 5;
numbers[4] = 6;

int len = numbers.Length;

for (int i = 0; i < len; i++)
{
    Console.WriteLine(numbers[i]);
}
Console.WriteLine();

//C# Nullable
Nullable<bool> male = null;
int? age2 = null;

Console.WriteLine(male.HasValue);
Console.WriteLine(age2.HasValue);
Console.WriteLine();

//C# bitwise operators
Console.WriteLine(~ 7); // prints -8 //i.e. 0111 --> -1000
Console.WriteLine(~ -8); // prints 7 //i.e. -1000 --> 0111

Console.WriteLine(6 & 3); // prints 2 //i.e. 0110 & 0011 = 0010 
Console.WriteLine(3 & 6); // prints 2 //i.e. 0011 & 0110 = 0010

Console.WriteLine(6 | 3); // prints 7
Console.WriteLine(3 | 6); // prints 7

Console.WriteLine(6 ^ 3); // prints 5 i.e either of them is 1, then 1; both 1 then 0
Console.WriteLine(3 ^ 6); // prints 5 //i.e. 0011 ^ 0110 = 0101
Console.WriteLine();

//Compound Assignment
int a = 1;
a = a + 1;

Console.WriteLine(a <<= 3); // prints 16 //i.e. 0010 (shift 1 right by 3 places) --> 10000
Console.WriteLine();

//C# index from end operator ^
int[] vals1 = { 1, 2, 3, 4, 5 };

Console.WriteLine(vals1[^1]);
Console.WriteLine(vals1[^2]);

var word2 = "gray falcon";

Console.WriteLine(word2[^1]);
Console.WriteLine();

//C# range operator ..
int[] vals2 = { 1, 2, 3, 4, 5, 6, 7 };

var slice1 = vals2[1..4];
Console.WriteLine("[{0}]", string.Join(", ", slice1));

var slice2 = vals2[..^0];
Console.WriteLine("[{0}]", string.Join(", ", slice2));
Console.WriteLine();

Console.WriteLine(Math.Min(22, 20));